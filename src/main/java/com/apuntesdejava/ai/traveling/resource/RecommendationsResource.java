/*
 * Copyright 2024 Diego Silva <diego.silva at apuntesdejava.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.apuntesdejava.ai.traveling.resource;

import com.apuntesdejava.ai.traveling.service.GenerateTextService;
import jakarta.inject.Inject;
import jakarta.json.Json;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;

import static jakarta.ws.rs.core.MediaType.TEXT_PLAIN;

import jakarta.ws.rs.core.Response;
import org.eclipse.microprofile.openapi.annotations.Operation;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;

/**
 * @author Diego Silva <diego.silva at apuntesdejava.com>
 */
@Path("recommendations")
public class RecommendationsResource {

    @Inject
    private GenerateTextService generateTextService;

    @GET
    @Operation(summary = "Get the detailed recommendation generated by generative artificial intelligence")
    @APIResponses(value = {
            @APIResponse(responseCode = "200", description = "Success operation"),
            @APIResponse(responseCode = "400", description = "Invalid input")
    })
    @Produces(TEXT_PLAIN)
    public Response getRecommendationInfo(@QueryParam("locationName") String locationName, @QueryParam("location") String location) {
        if (location == null || location.isEmpty() || locationName == null || locationName.isEmpty())
            return Response.status(Response.Status.BAD_REQUEST).build();
        var response = generateTextService.getTextGenerate(locationName, location);
        var responseJson = Json.createObjectBuilder()
                .add("content", response)
                .build();
        return Response.ok(responseJson.toString()).build();
    }

}
